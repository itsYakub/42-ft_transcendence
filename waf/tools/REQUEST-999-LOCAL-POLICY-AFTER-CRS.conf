# REQUEST-999-LOCAL-POLICY-AFTER-CRS.conf
# Runs after CRS; denies immediately on classic cmd-inj/XSS/RFI tokens.

# 1) Command separators / chain ops like ";" and "&&"
SecRule ARGS|REQUEST_URI "@rx (?i)(?:^|[[:space:]])(?:;|&&)(?:[[:space:]]|$)" \
  "id:1002901,phase:2,deny,status:403,log,msg:'Cmd-injection: separator/chain op',t:urlDecodeUni,t:compressWhitespace"

# 2) Command substitution: backticks and $(...)
SecRule ARGS|REQUEST_URI "@rx (?i)(`[^`]*`|\$\([^)]*\))" \
  "id:1002903,phase:2,deny,status:403,log,msg:'Cmd-injection: command substitution',t:urlDecodeUni"

# 3) Explicit shell spawns
SecRule ARGS|REQUEST_URI "@rx (?i)\b(?:bash|sh)\s*-c\b" \
  "id:1002904,phase:2,deny,status:403,log,msg:'Cmd-injection: shell spawn',t:urlDecodeUni,t:compressWhitespace"

# 5) Event-handler XSS (onmouseover=, onclick=, ...)
SecRule ARGS|REQUEST_URI "@rx (?i)\bon[a-z]+\s*=" \
  "id:1002906,phase:2,deny,status:403,log,msg:'XSS: HTML event handler',t:urlDecodeUni,t:compressWhitespace"

# 6) <script> tag quick catch
SecRule ARGS|REQUEST_URI "@rx (?i)<\s*script\b" \
  "id:1002907,phase:2,deny,status:403,log,msg:'XSS: <script> tag',t:urlDecodeUni"

# 7) *leading* separator (`;id`)
SecRule ARGS:cmd "@rx (?i)^[[:space:]]*;[[:space:]]*" \
  "id:1002902,phase:2,deny,status:403,log,msg:'Cmd injection: leading semicolon',\
   t:urlDecodeUni,t:compressWhitespace"
